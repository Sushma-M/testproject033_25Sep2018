/*Copyright (c) 2015-2016 wavemaker-com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker-com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker-com*/
package com.salesdb.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.HashMap;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.query.WMQueryExecutor;
import com.wavemaker.runtime.data.export.ExportOptions;
import com.wavemaker.runtime.data.model.QueryProcedureInput;

import com.salesdb.models.query.*;

@Service
public class SalesdbQueryExecutorServiceImpl implements SalesdbQueryExecutorService {

    private static final Logger LOGGER = LoggerFactory.getLogger(SalesdbQueryExecutorServiceImpl.class);

    @Autowired
    @Qualifier("salesdbWMQueryExecutor")
    private WMQueryExecutor queryExecutor;

    @Transactional(value = "salesdbTransactionManager", readOnly = true)
    @Override
    public Page<AllSalesByRepResponse> executeAllSalesByRep(String channel, String id, Pageable pageable) {
        Map<String, Object> params = new HashMap<>(2);

        params.put("channel", channel);
        params.put("id", id);

        return queryExecutor.executeNamedQuery("AllSalesByRep", params, AllSalesByRepResponse.class, pageable);
    }

    @Transactional(value = "salesdbTransactionManager", timeout = 300, readOnly = true)
    @Override
    public void exportAllSalesByRep(String channel, String id, ExportOptions exportOptions, Pageable pageable, OutputStream outputStream) {
        Map<String, Object> params = new HashMap<>(2);

        params.put("channel", channel);
        params.put("id", id);

        QueryProcedureInput<AllSalesByRepResponse> queryInput = new QueryProcedureInput<>("AllSalesByRep", params, AllSalesByRepResponse.class);

        queryExecutor.exportNamedQueryData(queryInput, exportOptions, pageable, outputStream);
    }

    @Transactional(value = "salesdbTransactionManager", readOnly = true)
    @Override
    public Page<TotalLeadsResponse> executeTotalLeads(Pageable pageable) {
        Map<String, Object> params = new HashMap<>(0);


        return queryExecutor.executeNamedQuery("totalLeads", params, TotalLeadsResponse.class, pageable);
    }

    @Transactional(value = "salesdbTransactionManager", timeout = 300, readOnly = true)
    @Override
    public void exportTotalLeads(ExportOptions exportOptions, Pageable pageable, OutputStream outputStream) {
        Map<String, Object> params = new HashMap<>(0);


        QueryProcedureInput<TotalLeadsResponse> queryInput = new QueryProcedureInput<>("totalLeads", params, TotalLeadsResponse.class);

        queryExecutor.exportNamedQueryData(queryInput, exportOptions, pageable, outputStream);
    }

    @Transactional(value = "salesdbTransactionManager", readOnly = true)
    @Override
    public Page<SalesByRepsResponse> executeSalesByReps(Integer channel, Pageable pageable) {
        Map<String, Object> params = new HashMap<>(1);

        params.put("channel", channel);

        return queryExecutor.executeNamedQuery("salesByReps", params, SalesByRepsResponse.class, pageable);
    }

    @Transactional(value = "salesdbTransactionManager", timeout = 300, readOnly = true)
    @Override
    public void exportSalesByReps(Integer channel, ExportOptions exportOptions, Pageable pageable, OutputStream outputStream) {
        Map<String, Object> params = new HashMap<>(1);

        params.put("channel", channel);

        QueryProcedureInput<SalesByRepsResponse> queryInput = new QueryProcedureInput<>("salesByReps", params, SalesByRepsResponse.class);

        queryExecutor.exportNamedQueryData(queryInput, exportOptions, pageable, outputStream);
    }

    @Transactional(value = "salesdbTransactionManager", readOnly = true)
    @Override
    public Page<TopTrendingProductsResponse> executeTopTrendingProducts(Pageable pageable) {
        Map<String, Object> params = new HashMap<>(0);


        return queryExecutor.executeNamedQuery("topTrendingProducts", params, TopTrendingProductsResponse.class, pageable);
    }

    @Transactional(value = "salesdbTransactionManager", timeout = 300, readOnly = true)
    @Override
    public void exportTopTrendingProducts(ExportOptions exportOptions, Pageable pageable, OutputStream outputStream) {
        Map<String, Object> params = new HashMap<>(0);


        QueryProcedureInput<TopTrendingProductsResponse> queryInput = new QueryProcedureInput<>("topTrendingProducts", params, TopTrendingProductsResponse.class);

        queryExecutor.exportNamedQueryData(queryInput, exportOptions, pageable, outputStream);
    }

    @Transactional(value = "salesdbTransactionManager", readOnly = true)
    @Override
    public Page<TotalSalesAndRevenueResponse> executeTotalSalesAndRevenue(Pageable pageable) {
        Map<String, Object> params = new HashMap<>(0);


        return queryExecutor.executeNamedQuery("totalSalesAndRevenue", params, TotalSalesAndRevenueResponse.class, pageable);
    }

    @Transactional(value = "salesdbTransactionManager", timeout = 300, readOnly = true)
    @Override
    public void exportTotalSalesAndRevenue(ExportOptions exportOptions, Pageable pageable, OutputStream outputStream) {
        Map<String, Object> params = new HashMap<>(0);


        QueryProcedureInput<TotalSalesAndRevenueResponse> queryInput = new QueryProcedureInput<>("totalSalesAndRevenue", params, TotalSalesAndRevenueResponse.class);

        queryExecutor.exportNamedQueryData(queryInput, exportOptions, pageable, outputStream);
    }

    @Transactional(value = "salesdbTransactionManager", readOnly = true)
    @Override
    public Page<SalesbyRepIdResponse> executeSalesbyRepId(String channel, Integer id, Pageable pageable) {
        Map<String, Object> params = new HashMap<>(2);

        params.put("channel", channel);
        params.put("id", id);

        return queryExecutor.executeNamedQuery("SalesbyRepId", params, SalesbyRepIdResponse.class, pageable);
    }

    @Transactional(value = "salesdbTransactionManager", timeout = 300, readOnly = true)
    @Override
    public void exportSalesbyRepId(String channel, Integer id, ExportOptions exportOptions, Pageable pageable, OutputStream outputStream) {
        Map<String, Object> params = new HashMap<>(2);

        params.put("channel", channel);
        params.put("id", id);

        QueryProcedureInput<SalesbyRepIdResponse> queryInput = new QueryProcedureInput<>("SalesbyRepId", params, SalesbyRepIdResponse.class);

        queryExecutor.exportNamedQueryData(queryInput, exportOptions, pageable, outputStream);
    }

}